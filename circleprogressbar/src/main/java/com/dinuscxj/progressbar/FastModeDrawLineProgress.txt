/**
 * In the center of the drawing area as a reference point , rotate the canvas
 */
private void drawLineProgress(Canvas canvas) {
    int rotateUnit = 360 / mLineCount;
    int progressLineCount = (int) ((float) getProgress() / (float) getMax() * mLineCount);

    for (int i = 0; i < mLineCount; i++) {
        int saveCount = canvas.save();
        canvas.rotate(i * rotateUnit, mCenterX, mCenterY);

        if (i < progressLineCount) {
          mProgressPaint.setColor(evaluateColorChange((float) i / (float) mLineCount, mProgressStartColor, mProgressEndColor));
          canvas.drawLine(mProgressRectF.centerX(), mProgressRectF.top,
              mProgressRectF.centerX(), mProgressRectF.top + mLineWidth, mProgressPaint);
        } else {
          canvas.drawLine(mProgressRectF.centerX(), mProgressRectF.top,
              mProgressRectF.centerX(), mProgressRectF.top + mLineWidth, mBackgroundPaint);
        }

        canvas.restoreToCount(saveCount);
    }
}

private int evaluateColorChange(float fraction, int startValue, int endValue) {
    if (fraction > 0.5f) {
      fraction = (fraction - 0.5f) * 2.0f;
      //swap
      int temp = startValue;
      startValue = endValue;
      endValue = temp;
    } else {
      fraction *= 2.0f;
    }

    int startA = (startValue >> 24) & 0xff;
    int startR = (startValue >> 16) & 0xff;
    int startG = (startValue >> 8) & 0xff;
    int startB = startValue & 0xff;

    int endA = (endValue >> 24) & 0xff;
    int endR = (endValue >> 16) & 0xff;
    int endG = (endValue >> 8) & 0xff;
    int endB = endValue & 0xff;

    return ((startA + (int)(fraction * (endA - startA))) << 24) |
        ((startR + (int)(fraction * (endR - startR))) << 16) |
        ((startG + (int)(fraction * (endG - startG))) << 8) |
        ((startB + (int)(fraction * (endB - startB))));
}